{"version":3,"sources":["../../../server/utils/users.test.js"],"names":["expect","require","Users","describe","users","beforeEach","id","name","room","it","user","addUser","toEqual","removeUser","length","toBe","userID","getUser","toNotExist","userList","getUserList","getRoomList"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;;eACgBA,QAAQ,SAAR,C;IAATC,K,YAAAA,K;;AAGPC,SAAS,OAAT,EAAkB,YAAM;AACpB,QAAIC,cAAJ;;AAEAC,eAAW,YAAM;AACbD,gBAAQ,IAAIF,KAAJ,EAAR;AACAE,cAAMA,KAAN,GAAc,CAAC;AACXE,gBAAI,GADO;AAEXC,kBAAM,MAFK;AAGXC,kBAAM;AAHK,SAAD,EAIP;AACCF,gBAAI,GADL;AAECC,kBAAM,KAFP;AAGCC,kBAAM;AAHP,SAJO,EAQP;AACCF,gBAAI,GADL;AAECC,kBAAM,OAFP;AAGCC,kBAAM;AAHP,SARO,CAAd;AAaH,KAfD;;AAiBAC,OAAG,qBAAH,EAA0B,YAAM;AAC5B,YAAIL,QAAQ,IAAIF,KAAJ,EAAZ;AACA,YAAIQ,OAAO;AACPJ,gBAAI,KADG;AAEPC,kBAAM,OAFC;AAGPC,kBAAM;AAHC,SAAX;AAKAJ,cAAMO,OAAN,CAAcD,KAAKJ,EAAnB,EAAuBI,KAAKH,IAA5B,EAAkCG,KAAKF,IAAvC;;AAEAR,eAAOI,MAAMA,KAAb,EAAoBQ,OAApB,CAA4B,CAACF,IAAD,CAA5B;AACH,KAVD;;AAYAD,OAAG,sBAAH,EAA2B,YAAM;AAC7B,YAAIC,OAAO;AACPJ,gBAAI,GADG;AAEPC,kBAAM,MAFC;AAGPC,kBAAM;AAHC,SAAX;AAKAJ,cAAMS,UAAN,CAAiBH,KAAKJ,EAAtB;AACAN,eAAOI,MAAMA,KAAN,CAAYU,MAAnB,EAA2BC,IAA3B,CAAgC,CAAhC;AAEH,KATD;;AAWAN,OAAG,wBAAH,EAA6B,YAAM;AAC/BL,cAAMS,UAAN,CAAiB,CAAjB;AACAb,eAAOI,MAAMA,KAAN,CAAYU,MAAnB,EAA2BC,IAA3B,CAAgC,CAAhC;AACH,KAHD;;AAKAN,OAAG,kBAAH,EAAuB,YAAM;AACzB,YAAIO,SAAS,GAAb;AACA,YAAIN,OAAON,MAAMa,OAAN,CAAcD,MAAd,CAAX;;AAEAhB,eAAOU,KAAKJ,EAAZ,EAAgBS,IAAhB,CAAqBC,MAArB;AACH,KALD;;AAOAP,OAAG,sBAAH,EAA2B,YAAM;AAC7B,YAAIO,SAAS,IAAb;AACA,YAAIN,OAAON,MAAMa,OAAN,CAAcD,MAAd,CAAX;;AAEAhB,eAAOU,IAAP,EAAaQ,UAAb;AAEH,KAND;;AAQAT,OAAG,qCAAH,EAA0C,YAAM;AAC5C,YAAIU,WAAWf,MAAMgB,WAAN,CAAkB,aAAlB,CAAf;;AAEApB,eAAOmB,QAAP,EAAiBP,OAAjB,CAAyB,CAAC,MAAD,EAAS,OAAT,CAAzB;AACH,KAJD;;AAMAH,OAAG,sCAAH,EAA2C,YAAM;AAC7C,YAAIU,WAAWf,MAAMgB,WAAN,CAAkB,cAAlB,CAAf;;AAEApB,eAAOmB,QAAP,EAAiBP,OAAjB,CAAyB,CAAC,KAAD,CAAzB;AACH,KAJD;;AAMAH,OAAG,0BAAH,EAA+B,YAAM;AACjC,YAAIU,WAAWf,MAAMiB,WAAN,EAAf;;AAEArB,eAAOmB,QAAP,EAAiBP,OAAjB,CAAyB,CAAC,aAAD,EAAgB,cAAhB,CAAzB;AACH,KAJD;AAMH,CAjFD","file":"users.test.js","sourcesContent":["const expect = require(\"expect\");\nconst {Users} = require(\"./users\");\n\n\ndescribe(\"Users\", () => {\n    let users;\n\n    beforeEach(() => {\n        users = new Users();\n        users.users = [{\n            id: \"1\",\n            name: \"Mike\",\n            room: \"Node Course\"\n            }, {\n                id: \"2\",\n                name: \"Jen\",\n                room: \"React Course\"\n            }, {\n                id: \"3\",\n                name: \"Julie\",\n                room: \"Node Course\"\n            }];\n    });\n\n    it(\"should add new user\", () => {\n        let users = new Users();\n        let user = {\n            id: \"123\",\n            name: \"Chris\",\n            room: \"AFK\"\n        };\n        users.addUser(user.id, user.name, user.room);\n\n        expect(users.users).toEqual([user]);\n    });\n\n    it(\"should remove a user\", () => {\n        let user = {\n            id: \"1\",\n            name: \"Mike\",\n            room: \"Node Course\"\n        };\n        users.removeUser(user.id);\n        expect(users.users.length).toBe(2);\n\n    });\n\n    it(\"should not remove user\", () => {\n        users.removeUser(5);\n        expect(users.users.length).toBe(3);\n    });\n\n    it(\"should find user\", () => {\n        let userID = \"2\";\n        var user = users.getUser(userID);\n\n        expect(user.id).toBe(userID);\n    });\n\n    it(\"should not find user\", () => {\n        let userID = \"99\";\n        var user = users.getUser(userID);\n\n        expect(user).toNotExist();\n\n    });\n\n    it(\"should return names for node course\", () => {\n        let userList = users.getUserList(\"Node Course\");\n\n        expect(userList).toEqual([\"Mike\", \"Julie\"]);\n    });\n\n    it(\"should return names for react course\", () => {\n        let userList = users.getUserList(\"React Course\");\n\n        expect(userList).toEqual([\"Jen\"]);\n    });\n\n    it(\"should return room names\", () => {\n        let userList = users.getRoomList();\n\n        expect(userList).toEqual([\"Node Course\", \"React Course\"]);\n    });\n\n});"]}