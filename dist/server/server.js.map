{"version":3,"sources":["../../server/server.js"],"names":["path","require","http","express","socketIO","generateMessage","generateLocationMessage","isRealString","Users","publicPath","join","__dirname","port","process","env","PORT","app","server","createServer","io","users","use","static","on","socket","console","log","emit","getRoomList","userData","callback","name","room","removeUser","id","addUser","to","getUserList","broadcast","message","user","getUser","text","coords","latitude","longitude","listen"],"mappings":"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","file":"server.js","sourcesContent":["const path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst express = require(\"express\");\r\nconst socketIO = require(\"socket.io\");\r\n\r\nconst {generateMessage, generateLocationMessage} = require(\"./utils/message\");\r\nconst {isRealString} = require(\"./utils/validation\");\r\nconst {Users} = require(\"./utils/users\");\r\nconst publicPath = path.join(__dirname, \"../public\");\r\nconst port = process.env.PORT || 3000;\r\nlet app = express();\r\nlet server = http.createServer(app);\r\nlet io = socketIO(server);\r\nlet users = new Users();\r\n\r\napp.use(express.static(publicPath));\r\n\r\nio.on(\"connection\", (socket) => {\r\n    console.log(\"New user connected\");\r\n    io.emit(\"updateRoomsList\", users.getRoomList());\r\n\r\n    socket.on(\"join\", (userData, callback) => {\r\n        if (!isRealString(userData.name) || !isRealString(userData.room)) {\r\n            return callback(\"Name und Raum werden benoetigt.\");\r\n        }\r\n        socket.join(userData.room);\r\n        users.removeUser(socket.id);\r\n        users.addUser(socket.id, userData.name, userData.room);\r\n        io.to(userData.room).emit(\"updateUserList\", users.getUserList(userData.room));\r\n        socket.emit(\"newMessage\", generateMessage(\"Fr'amily\", \"Willkommen im Chat\"));\r\n        socket.broadcast.to(userData.room).emit(\"newMessage\", generateMessage(\"Fr'amily\", `${userData.name} ist beigetreten.`));\r\n\r\n        callback();\r\n    });\r\n\r\n\r\n\r\n\r\n    socket.on(\"createMessage\", (message, callback) => {\r\n        let user = users.getUser(socket.id);\r\n\r\n        if (user && isRealString(message.text)) {\r\n            io.to(user.room).emit(\"newMessage\", generateMessage(user.name, message.text));\r\n        }\r\n        callback();\r\n    });\r\n\r\n    socket.on(\"createLocationMessage\", (coords) => {\r\n        let user = users.getUser(socket.id);\r\n        if (user) {\r\n            io.to(user.room).emit(\"newLocationMessage\", generateLocationMessage(user.name, coords.latitude, coords.longitude));\r\n        }\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n        let user = users.removeUser(socket.id);\r\n        if (user) {\r\n            io.to(user.room).emit(\"updateUserList\", users.getUserList(user.room));\r\n            io.to(user.room).emit(\"newMessage\", generateMessage(\"Fr'amily\", `${user.name} ist gegangen.`));\r\n        }\r\n    });\r\n});\r\n\r\nserver.listen(port, () => {\r\n    console.log(`Server is up on ${port}`);\r\n});"]}