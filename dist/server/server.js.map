{"version":3,"sources":["../../server/server.js"],"names":["path","require","http","express","socketIO","generateMessage","generateLocationMessage","isRealString","Users","publicPath","join","__dirname","port","process","env","PORT","app","server","createServer","io","users","use","static","on","socket","console","log","userData","callback","name","room","removeUser","id","addUser","to","emit","getUserList","broadcast","message","from","text","coords","latitude","longitude","user","listen"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,WAAWH,QAAQ,WAAR,CAAjB;;eAEmDA,QAAQ,iBAAR,C;IAA5CI,e,YAAAA,e;IAAiBC,uB,YAAAA,uB;;gBACDL,QAAQ,oBAAR,C;IAAhBM,Y,aAAAA,Y;;gBACSN,QAAQ,eAAR,C;IAATO,K,aAAAA,K;;AACP,IAAMC,aAAaT,KAAKU,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAnB;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAIC,MAAMb,SAAV;AACA,IAAIc,SAASf,KAAKgB,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIG,KAAKf,SAASa,MAAT,CAAT;AACA,IAAIG,QAAQ,IAAIZ,KAAJ,EAAZ;;AAEAQ,IAAIK,GAAJ,CAAQlB,QAAQmB,MAAR,CAAeb,UAAf,CAAR;;AAEAU,GAAGI,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC5BC,YAAQC,GAAR,CAAY,oBAAZ;;AAEAF,WAAOD,EAAP,CAAU,MAAV,EAAkB,UAACI,QAAD,EAAWC,QAAX,EAAwB;AACtC,YAAI,CAACrB,aAAaoB,SAASE,IAAtB,CAAD,IAAgC,CAACtB,aAAaoB,SAASG,IAAtB,CAArC,EAAkE;AAC9D,mBAAOF,SAAS,iCAAT,CAAP;AACH;;AAEDJ,eAAOd,IAAP,CAAYiB,SAASG,IAArB;;AAEAV,cAAMW,UAAN,CAAiBP,OAAOQ,EAAxB;AACAZ,cAAMa,OAAN,CAAcT,OAAOQ,EAArB,EAAyBL,SAASE,IAAlC,EAAwCF,SAASG,IAAjD;;AAEAX,WAAGe,EAAH,CAAMP,SAASG,IAAf,EAAqBK,IAArB,CAA0B,gBAA1B,EAA4Cf,MAAMgB,WAAN,CAAkBT,SAASG,IAA3B,CAA5C;;AAEAN,eAAOW,IAAP,CAAY,YAAZ,EAA0B9B,gBAAgB,UAAhB,EAA4B,oBAA5B,CAA1B;AACAmB,eAAOa,SAAP,CAAiBH,EAAjB,CAAoBP,SAASG,IAA7B,EAAmCK,IAAnC,CAAwC,YAAxC,EAAsD9B,gBAAgB,UAAhB,EAA+BsB,SAASE,IAAxC,uBAAtD;;AAEAD;AACH,KAhBD;;AAmBAJ,WAAOD,EAAP,CAAU,eAAV,EAA2B,UAACe,OAAD,EAAUV,QAAV,EAAuB;AAC9CH,gBAAQC,GAAR,CAAY,eAAZ,EAA6BY,OAA7B;AACAnB,WAAGgB,IAAH,CAAQ,YAAR,EAAsB9B,gBAAgBiC,QAAQC,IAAxB,EAA8BD,QAAQE,IAAtC,CAAtB;AACAZ;AACH,KAJD;;AAMAJ,WAAOD,EAAP,CAAU,uBAAV,EAAmC,UAACkB,MAAD,EAAY;AAC3CtB,WAAGgB,IAAH,CAAQ,oBAAR,EAA8B7B,wBAAwB,MAAxB,EAAgCmC,OAAOC,QAAvC,EAAiDD,OAAOE,SAAxD,CAA9B;AACH,KAFD;;AAIAnB,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1B,YAAIqB,OAAOxB,MAAMW,UAAN,CAAiBP,OAAOQ,EAAxB,CAAX;AACA,YAAIY,IAAJ,EAAS;AACLzB,eAAGe,EAAH,CAAMU,KAAKd,IAAX,EAAiBK,IAAjB,CAAsB,gBAAtB,EAAwCf,MAAMgB,WAAN,CAAkBQ,KAAKd,IAAvB,CAAxC;AACAX,eAAGe,EAAH,CAAMU,KAAKd,IAAX,EAAiBK,IAAjB,CAAsB,YAAtB,EAAoC9B,gBAAgB,UAAhB,EAA+BuC,KAAKf,IAApC,oBAApC;AACH;AACJ,KAND;AAOH,CAvCD;;AAyCAZ,OAAO4B,MAAP,CAAcjC,IAAd,EAAoB,YAAM;AACtBa,YAAQC,GAAR,sBAA+Bd,IAA/B;AACH,CAFD","file":"server.js","sourcesContent":["const path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst express = require(\"express\");\r\nconst socketIO = require(\"socket.io\");\r\n\r\nconst {generateMessage, generateLocationMessage} = require(\"./utils/message\");\r\nconst {isRealString} = require(\"./utils/validation\");\r\nconst {Users} = require(\"./utils/users\");\r\nconst publicPath = path.join(__dirname, \"../public\");\r\nconst port = process.env.PORT || 3000;\r\nlet app = express();\r\nlet server = http.createServer(app);\r\nlet io = socketIO(server);\r\nlet users = new Users();\r\n\r\napp.use(express.static(publicPath));\r\n\r\nio.on(\"connection\", (socket) => {\r\n    console.log(\"New user connected\");\r\n\r\n    socket.on(\"join\", (userData, callback) => {\r\n        if (!isRealString(userData.name) || !isRealString(userData.room)) {\r\n            return callback(\"Name und Raum werden benoetigt.\");\r\n        }\r\n\r\n        socket.join(userData.room);\r\n        \r\n        users.removeUser(socket.id);\r\n        users.addUser(socket.id, userData.name, userData.room);\r\n\r\n        io.to(userData.room).emit(\"updateUserList\", users.getUserList(userData.room));\r\n\r\n        socket.emit(\"newMessage\", generateMessage(\"Fr'amily\", \"Willkommen im Chat\"));\r\n        socket.broadcast.to(userData.room).emit(\"newMessage\", generateMessage(\"Fr'amily\", `${userData.name} ist beigetreten.`));\r\n\r\n        callback();\r\n    });\r\n\r\n\r\n    socket.on(\"createMessage\", (message, callback) => {\r\n        console.log(\"createMessage\", message);\r\n        io.emit(\"newMessage\", generateMessage(message.from, message.text));\r\n        callback();\r\n    });\r\n\r\n    socket.on(\"createLocationMessage\", (coords) => {\r\n        io.emit(\"newLocationMessage\", generateLocationMessage(\"User\", coords.latitude, coords.longitude));\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n        let user = users.removeUser(socket.id);\r\n        if (user){\r\n            io.to(user.room).emit(\"updateUserList\", users.getUserList(user.room));\r\n            io.to(user.room).emit(\"newMessage\", generateMessage(\"Fr'amily\", `${user.name} ist gegangen.`));\r\n        }\r\n    });\r\n});\r\n\r\nserver.listen(port, () => {\r\n    console.log(`Server is up on ${port}`);\r\n});"]}